
// Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

// If target is not found in the array, return [-1, -1].

// You must write an algorithm with O(log n) runtime complexity.


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
       
        int n  = nums.size();
        int first= -1 , last = -1 ;
        int s = 0 , e = n - 1, m; 
         
        //   find first --
         while(s <= e)
         {
            m = s + (e - s)/2;
            
            if (target == nums[m])
            {
                first = m;
                e = m -1;
            }
            else if (target > nums[m])
            {
                s = m + 1;
            }
            else
            {
                e = m -1;
            }
         }

        //   find last --
            
        s = 0 , e = n - 1 ;

        while(s <= e)
         {
            m = s + (e - s)/2;
            
            if (target == nums[m])
            {
                last = m;
                s = m + 1;
            }
            else if (target > nums[m])
            {
                s = m + 1;
            }
            else
            {
                e = m -1;
            }
         }

         vector<int>a(2 );
         a[0] = first;
         a[1] = last;
         return a;
    }
};